use std::{
    fs::{self, File},
    io::Write,
    path::Path,
    process::exit,
    sync::Arc,
    time::{SystemTime, UNIX_EPOCH},
};

use log::{error, info, LevelFilter};
use tokio::task;
use tauri::Manager;
use directories::ProjectDirs;

fn get_log_name() -> String {
    let timestamp = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs();
    format!("logs/debug-{}-luna.txt", timestamp)
}

fn init_logger() {
    let log_file = get_log_name();
    fs::create_dir_all("logs").unwrap();

    fern::Dispatch::new()
        .format(|out, message, _| {
            out.finish(format_args!("{}", message));
        })
        .level(LevelFilter::Info)
        .chain(fern::log_file(log_file).unwrap())
        .apply()
        .unwrap();
}

fn init_directories() {
    let dirs = ["scripts", "autoexec", "workspace", "logs"];
    for dir in dirs.iter() {
        if !Path::new(dir).exists() {
            fs::create_dir_all(dir).unwrap();
        }
    }

    let autoexec_file = Path::new("autoexec/main.luau");
    if !autoexec_file.exists() {
        let mut file = File::create(autoexec_file).unwrap();
        file.write_all(
            b"-- Auto-generated by Luna's init system.\nprint(\"Welcome to Luna!\")\n",
        )
        .unwrap();
    }
}

fn cleanup_logs() {
    let log_dir = Path::new("logs");
    if let Ok(entries) = fs::read_dir(log_dir) {
        let logs: Vec<_> = entries.filter_map(Result::ok).collect();
        if logs.len() > 10 {
            for entry in logs {
                let _ = fs::remove_file(entry.path());
            }
        }
    }
}

async fn background_task() {
    loop {
        info!("Checking Roblox processes...");
        tokio::time::sleep(std::time::Duration::from_secs(5)).await;
    }
}

fn main() {
    init_logger();
    init_directories();
    cleanup_logs();

    tauri::Builder::default()
        .setup(|app| {
            let _handle = app.handle();
            task::spawn(background_task());
            Ok(())
        })
        .invoke_handler(tauri::generate_handler![])
        .run(tauri::generate_context!())
        .expect("error while running Tauri app");
}
